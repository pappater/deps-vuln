{"version":3,"sources":["components/DragAndDrop.tsx","components/TableDisplay.tsx","components/ExportButton.tsx","components/ThemeToggle.tsx","App.tsx","index.tsx"],"names":["DragAndDrop","_ref","onFileDrop","dragging","setDragging","useState","parseCSV","text","split","map","row","_jsx","onDragOver","e","preventDefault","stopPropagation","onDragLeave","onDrop","files","dataTransfer","length","file","reader","FileReader","onload","event","_event$target","target","result","parsedData","String","readAsText","style","border","padding","textAlign","transition","children","TableDisplay","data","headers","Object","keys","_jsxs","header","rowIndex","ExportButton","onClick","handleExport","csvContent","values","join","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","setAttribute","visibility","body","appendChild","click","removeChild","ThemeToggle","toggleTheme","className","onChange","App","setData","isDarkTheme","setIsDarkTheme","newData","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8373d6d5.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst DragAndDrop: React.FC<{ onFileDrop: (data: any) => void }> = ({ onFileDrop }) => {\n    const [dragging, setDragging] = useState(false);\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setDragging(true);\n    };\n\n    const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setDragging(false);\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setDragging(false);\n\n        const files = e.dataTransfer.files;\n        if (files.length > 0) {\n            const file = files[0];\n            const reader = new FileReader();\n            reader.onload = (event) => {\n                const text = event.target?.result;\n                if (text) {\n                    const parsedData = parseCSV(String(text));\n                    onFileDrop(parsedData);\n                }\n            };\n            reader.readAsText(file);\n        }\n    };\n\n    const parseCSV = (text: string) => {\n        const rows = text.split('\\n').map(row => row.split(','));\n        return rows;\n    };\n\n    return (\n        <div\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n            style={{\n                border: dragging ? '2px dashed #000' : '2px solid #ccc',\n                padding: '20px',\n                textAlign: 'center',\n                transition: 'border 0.3s',\n            }}\n        >\n            {dragging ? 'Release to drop the file' : 'Drag and drop your audit report here'}\n        </div>\n    );\n};\n\nexport default DragAndDrop;","import React from 'react';\n\ninterface TableDisplayProps {\n    data: Array<Record<string, any>>;\n}\n\nconst TableDisplay: React.FC<TableDisplayProps> = ({ data }) => {\n    if (!data || data.length === 0) {\n        return <div>No data available</div>;\n    }\n\n    const headers = Object.keys(data[0]);\n\n    return (\n        <div>\n            <table>\n                <thead>\n                    <tr>\n                        {headers.map((header) => (\n                            <th key={header}>{header}</th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map((row, rowIndex) => (\n                        <tr key={rowIndex}>\n                            {headers.map((header) => (\n                                <td key={header}>{row[header]}</td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default TableDisplay;","import React from 'react';\n\ninterface ExportButtonProps {\n    data: any[]; // Replace 'any' with the appropriate type for your data\n}\n\nconst ExportButton: React.FC<ExportButtonProps> = ({ data }) => {\n    const handleExport = () => {\n        const csvContent = data.map(row => Object.values(row).join(\",\")).join(\"\\n\");\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", \"audit_report.csv\");\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    return (\n        <button onClick={handleExport}>\n            Export as CSV\n        </button>\n    );\n};\n\nexport default ExportButton;","\nimport React from 'react';\nimport '../styles/theme.css';\n\ninterface ThemeToggleProps {\n    toggleTheme: () => void;\n}\n\nconst ThemeToggle: React.FC<ThemeToggleProps> = ({ toggleTheme }) => {\n    return (\n        <div className=\"theme-toggle\">\n            <label>\n                <input type=\"checkbox\" onChange={toggleTheme} />\n                Toggle Theme\n            </label>\n        </div>\n    );\n};\n\nexport default ThemeToggle;","import React, { useState } from 'react';\nimport DragAndDrop from './components/DragAndDrop';\nimport TableDisplay from './components/TableDisplay';\nimport ExportButton from './components/ExportButton';\nimport ThemeToggle from './components/ThemeToggle';\nimport './styles/theme.css';\n\nconst App: React.FC = () => {\n    const [data, setData] = useState<any[]>([]);\n    const [isDarkTheme, setIsDarkTheme] = useState<boolean>(false);\n\n    const handleDataChange = (newData: any[]) => {\n        setData(newData);\n    };\n\n    const toggleTheme = () => {\n        setIsDarkTheme(!isDarkTheme);\n    };\n\n    return (\n        <div className={isDarkTheme ? 'dark-theme' : 'light-theme'}>\n            <ThemeToggle toggleTheme={toggleTheme} />\n            <DragAndDrop onFileDrop={handleDataChange} />\n            <TableDisplay data={data} />\n            <ExportButton data={data} />\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/theme.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}